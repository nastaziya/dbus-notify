#!/usr/bin/env python

#
#   q6-notification-proxy - Lightweight notification-deamon-proxy for Qubes OS
#   Receives Desktop Notifications (including libnotify / notify-send)
#   See: http://www.galago-project.org/specs/notification/0.9/index.html
#
#   The code comes from statnot, but it is significantly modified by v6ak. There is jusst a little code from the original app
#
#   Note: VERY early prototype, to get feedback.
#
#   Copyright (c) 2009-2011, 2015 by the authors
#   http://code.k2h.se (original statnot developer(s))
#   https://contact.v6ak.com (q6-nofitication-proxy developer)
#   Please report bugs or feature requests by e-mail.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import dbus.service
import dbus.mainloop.glib
from gi.repository import GLib
import subprocess
import json


class NotificationFetcher(dbus.service.Object):
    _id = 0

    @dbus.service.method("org.freedesktop.Notifications",
                         in_signature='susssasa{ss}i',
                         out_signature='u')
    def Notify(self, app_name, notification_id, app_icon,
               summary, body, actions, hints, expire_timeout):
        if not notification_id:
            self._id += 1
            notification_id = self._id
        # components header containing len of each component
        header = "{} {} {}\n".format(len(app_name), len(summary), len(body))
        # send header with all components to dom0
        subprocess.call(["/usr/lib/qubes/qrexec-client-vm", "dom0", "qubes.Notify",
                         "/usr/bin/echo", header, app_name, summary, body])
        return notification_id

    @dbus.service.method("org.freedesktop.Notifications", in_signature='', out_signature='as')
    def GetCapabilities(self):
        return ("body")

    @dbus.service.signal('org.freedesktop.Notifications', signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        pass

    @dbus.service.method("org.freedesktop.Notifications", in_signature='u', out_signature='')
    def CloseNotification(self, id):
        pass

    @dbus.service.method("org.freedesktop.Notifications", in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        return ("statnot", "http://code.k2h.se", "0.0.2", "1")


if __name__ == '__main__':
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    session_bus = dbus.SessionBus()
    name = dbus.service.BusName("org.freedesktop.Notifications", session_bus)
    nf = NotificationFetcher(session_bus, '/org/freedesktop/Notifications')
    loop = GLib.MainLoop()
    loop.run()
    #context = GLib.MainLoop().get_context()

    #while 1:
    #    context.iteration(True)
